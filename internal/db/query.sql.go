// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCatalog = `-- name: CreateCatalog :exec
INSERT INTO service_catalog (id, template) VALUES($1, $2)
`

type CreateCatalogParams struct {
	ID       uuid.UUID
	Template uuid.UUID
}

func (q *Queries) CreateCatalog(ctx context.Context, arg CreateCatalogParams) error {
	_, err := q.db.Exec(ctx, createCatalog, arg.ID, arg.Template)
	return err
}

const createEntry = `-- name: CreateEntry :exec
INSERT INTO service_entry (id, catalog_id, data, created_at, updated_at) VALUES ($1, $2, $3, now(), null)
`

type CreateEntryParams struct {
	ID        uuid.UUID
	CatalogID uuid.UUID
	Data      []byte
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) error {
	_, err := q.db.Exec(ctx, createEntry, arg.ID, arg.CatalogID, arg.Data)
	return err
}

const createTemplate = `-- name: CreateTemplate :exec
INSERT INTO service_templates (id, name, fields, created_by, created_at, updated_at) VALUES($1, $2, $3, $4, now(), null)
`

type CreateTemplateParams struct {
	ID        uuid.UUID
	Name      string
	Fields    []byte
	CreatedBy string
}

func (q *Queries) CreateTemplate(ctx context.Context, arg CreateTemplateParams) error {
	_, err := q.db.Exec(ctx, createTemplate,
		arg.ID,
		arg.Name,
		arg.Fields,
		arg.CreatedBy,
	)
	return err
}

const getAllEntries = `-- name: GetAllEntries :many
SELECT id, catalog_id, data, created_at, updated_at FROM service_entry ORDER BY created_at
`

func (q *Queries) GetAllEntries(ctx context.Context) ([]ServiceEntry, error) {
	rows, err := q.db.Query(ctx, getAllEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceEntry
	for rows.Next() {
		var i ServiceEntry
		if err := rows.Scan(
			&i.ID,
			&i.CatalogID,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTemplates = `-- name: GetAllTemplates :many
SELECT id, name, fields, created_by, created_at, updated_at FROM service_templates ORDER BY created_at
`

func (q *Queries) GetAllTemplates(ctx context.Context) ([]ServiceTemplate, error) {
	rows, err := q.db.Query(ctx, getAllTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceTemplate
	for rows.Next() {
		var i ServiceTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Fields,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCatalog = `-- name: GetCatalog :one
SELECT id, template FROM service_catalog LIMIT 1
`

func (q *Queries) GetCatalog(ctx context.Context) (ServiceCatalog, error) {
	row := q.db.QueryRow(ctx, getCatalog)
	var i ServiceCatalog
	err := row.Scan(&i.ID, &i.Template)
	return i, err
}

const getTemplateByID = `-- name: GetTemplateByID :one
SELECT id, name, fields, created_by, created_at, updated_at FROM service_templates WHERE id = $1
`

func (q *Queries) GetTemplateByID(ctx context.Context, id uuid.UUID) (ServiceTemplate, error) {
	row := q.db.QueryRow(ctx, getTemplateByID, id)
	var i ServiceTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Fields,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
